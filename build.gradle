plugins {
    id 'fabric-loom' version '1.3.+'
    id 'maven-publish'
    id 'io.github.juuxel.loom-vineflower' version '1.11.0'
}

archivesBaseName = project.archive_name
version = project.mod_version
group = project.maven_group

apply from: 'https://raw.githubusercontent.com/TerraformersMC/GradleScripts/3.0-beta/ferry.gradle'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }

    // TerraBlender
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // TerraBlender so we can target it with mixins
    modCompileOnlyApi "com.github.glitchfiend:TerraBlender-fabric:${terrablender_version}"

    // Terraform Surfaces API for OpenSimplexNoise
    include(modImplementation("com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${project.terraform_surfaces_api_version}"))

    // MixinExtras so we can mixin in a more compatible manner
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

loom {
    accessWidenerPath = file("src/main/resources/biolith.accesswidener")
}

vineflower {
    addToRuntimeClasspath.set(true)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publish {
    onlyIf {
        checkVersion(archivesBaseName, version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // Exclude TerraBlender from maven deps so Loom does not load it during builds
            // and tests of other projects using our API (unless they configure it to).
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["TerraBlender-fabric"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    setupRepositories(repositories)
}

static void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}

ext.checkVersion = { archivesBaseName, version ->
    try {
        def xml = new URL("https://maven.terraformersmc.com/com/terraformersmc/$archivesBaseName/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text()
        if (versions.contains(version)) {
            println "$archivesBaseName version $version will not be published; already exists"
            return false
        } else {
            println "$archivesBaseName version $version will be published"
            return true
        }
    } catch (FileNotFoundException ignored) {
        println "$archivesBaseName is not on maven yet"
        return true
    }
}
