plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // Terraform Surfaces API for OpenSimplexNoise
    //include(modImplementation("com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${rootProject.terraform_surfaces_api_version}"))

    // TerraBlender so we can use its API
    modCompileOnly "com.github.glitchfiend:TerraBlender-fabric:${rootProject.terrablender_version}"

    // Modern Beta so we can target it with mixins
    modCompileOnly "curse.maven:modern_beta-410423:4836942"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publish {
    onlyIf {
        rootProject.enabled_platforms.split(",").contains(project.projectDir)
    }
    onlyIf {
        checkVersion(archivesBaseName, version)
    }

    curseforge_game_versions = "${rootProject.curseforge_game_versions}, Fabric, Quilt"
    modrinth_mod_loaders = "fabric, quilt"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId "${rootProject.maven_group}"
            artifactId "${project.archivesBaseName}"
            version "${project.version}"

            // Exclude TerraBlender from maven deps so Loom does not load it during builds
            // and tests of other projects using our API (unless they configure it to).
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["TerraBlender-fabric", "TerraBlender-forge", "TerraBlender-neoforge"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    setupRepositories(repositories)
}

static void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}

ext.checkVersion = { archivesBaseName, version ->
    try {
        def xml = new URL("https://maven.terraformersmc.com/com/terraformersmc/$archivesBaseName/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text()
        if (versions.contains(version)) {
            println "$archivesBaseName version $version will not be published; already exists"
            return false
        } else {
            println "$archivesBaseName version $version will be published"
            return true
        }
    } catch (FileNotFoundException ignored) {
        println "$archivesBaseName is not on maven yet"
        return true
    }
}
